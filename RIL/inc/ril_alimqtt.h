/*==========================================================================
 |               Mobiletek OpenCPU --  Library header files
 |
 |              Copyright (c) 2017 Mobiletek Ltd.
 |
 |--------------------------------------------------------------------------
 | File Description
 | ----------------
 |      This file defines interfaces which are used in 'ril_mqtt.c'.
 |      NOTE: The interfaces are based on portable codes. Therefore they are not related to platform.
 |
 |--------------------------------------------------------------------------
 |
 |  Designed by     :   K.chen
 |  Coded    by     :   K.chen
 |  Tested   by     :   K.chen
 |--------------------------------------------------------------------------
 | Revision History
 | ----------------
 |  2017/6/1       K.chen        Create this file 
 |  ------------------------------------------------------------------------
 \=========================================================================*/
#ifndef __RIL_MQTT_H__
#define __RIL_MQTT_H__


/******************************************************************************
* Function:     RIL_MQTT_DeVerb
*  
* Description:
*               This function is used to Device authentication 
*
* Parameters:    
*               ProductKey:
*                   [in]The serial number of the product that was generated when the product was registered..
*				DeviceName:
*					[in]Register the device name of the specific device in the product..
*				DeviceSecret:
*                   [in]Register the device keys generated by the specific device in the product..
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32  RIL_AL_MQTT_DeVerb(u8 *ProductKey,u8 * DeviceName,u8 * DeviceSecret);



/******************************************************************************
* Function:    RIL_MQTT_SetParam
*  
* Description:
*               This function is used to Set the MQTT parameters.. 
*
* Parameters:    
*               ParaTag:
*                   [in]MQTT parameter name.
					A) the value range of "TIMEOUT"  is (0-60) actually available as (1-5), and the MQTT request TIMEOUT time, unit second.The specific action of this parameter is
						I. 	Send and receive packet timeout.
						II. The value is waiting for the ACK timeout reissue time with the QoS1 message in Pub, and the Sub and Unsub messages wait for ACK timeout.
					B)"CLEAN" clears the session, 0: does not clear;1: clear.This parameter determines whether the newly established connection accepts the offline message of QoS1 of 
					the topic before the device is accepted.This parameter is different from the standard MQTT function, and if set to 1, the server will ignore all the offline messages 
					for QoS1, but please note that the subscription relationship is not currently empty.	
					C)"KEEPALIVE" value range (0-1800), guaranteed time, unit second, ali cloud actual support (60~1800), setting the value program less than 60 will be automatically 
					corrected to 60.This parameter value is sent to the server in the connect message when the MQTT connection is established.After the connection is established, 
					the program will send the PING message to the server periodically. If the server does not receive the PING package within 1.5 cycles, it will judge the client to lower the line and release the relevant connection.
					D)"VERSION" MQTT VERSION, "3.1" or "3.1.1"
*
*				ParaValue:
*					[in]MQTT parameter values.
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32  RIL_AL_MQTT_SetParam(u8 * ParaTag,Mqtt_Info *ParaValue);




/******************************************************************************
* Function:     RIL_MQTT_Connect
*  
* Description:
*               This function is  Establish an MQTT connection based on the TLS channel.. 
* .
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32  RIL_AL_MQTT_Connect(void);




/******************************************************************************
* Function:     RIL_MQTT_Pub
*  
* Description:
*               This function is used to publish message. 
*
* Parameters:    
*               topic:
*                   [in]The topic of the Application message.
*
*				qos:
*					[in]Quality of Service.
*						0  At most once delivery for Application message.
*						1  At least once delivery for Application message.
*						2  Exactly once delivery for Application message.
*						It doesn't actually support 2.
*				message:
*              	The content of the published message;The length range is 1~2048 bytes.
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32  RIL_AL_MQTT_Pub(u8* topic,u8 qos,u8* message);





/******************************************************************************
* Function:     RIL_MQTT_Sub
*  
* Description:
*               This function is used to Subscribe to topics. 
*
* Parameters:    
*               topic:
*                   [in]The topic of the Application message. The maximum length of 256.
*
*				qos:
*					[in]Quality of Service.
*						0  At most once delivery for Application message.
*						1  At least once delivery for Application message.
*						2  Exactly once delivery for Application message.
*				status: 
*					[in]subscription message returns status value:
*						0: success, QoS0. 
*						1: success, QoS1. 
*						2: success, QoS2. 
*						128: failure.
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32  RIL_AL_MQTT_Sub(u8 * topic,s8 qos);



/******************************************************************************
* Function:     RIL_MQTT_UnSub
*  
* Description:
*               This function is used to Unsubscribe from topics. 
*
* Parameters:    
*               topic:
*                   [in]The topic of the will message. The maximum length of 256.
*			packet_id:
*					[in]The id that is returned when the subscription message is unsubscribed.
*			   status:
*			   		[in]Unsubscribe message return status value:
*			   		0: success. 
*					1: timeout. 
*					2: other mistakes.
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32  RIL_MQTT_UnSub(u8 * topic);


/******************************************************************************
* Function:    RIL_MQTT_State
*  
* Description:
*               This function is used to query the MQTT connection status.. 
*
* Parameters:  
*              
*              state : MQTT connection status.
*						0: MQTT disconnects.
*						1: MQTT connection status.
*
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32 RIL_AL_MQTT_State(void);



/******************************************************************************
* Function:     RIL_MQTT_Disconn
*  
* Description:
*               This function is used to disconnect the MQTT and release all the resources for the program. 
*
* Parameters:    
*
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32 RIL_AL_MQTT_Disconn(void);




/******************************************************************************
* Function:     RIL_MQTT_MsgPingRsp
*  
* Description:
*               This function is used to Whether to report the PING Response actively.. 
*
* Parameters:    
*			    mode:
*					[in] 0,1
*					 1  it is allowed to report.
*
* Return:  
*               RIL_AT_SUCCESS, this function succeeds.
*               Or, please see the definition of Enum_ATSndError.
******************************************************************************/
s32 RIL_AL_MQTT_MsgPingRsp(u8* PINGRSP ,u8 mode);



#endif
